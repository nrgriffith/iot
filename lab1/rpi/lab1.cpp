////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    int storageCounter = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;
    RTFLOAT pitchReadings[10] = {0};
    RTFLOAT yawReadings[10] = {0};
    RTFLOAT rollReadings[10] = {0};
    RTFLOAT tempReadings[10] = {0};
    RTFLOAT averageTemp = 0;
    RTFLOAT averageRoll = 0;
    RTFLOAT averageYaw = 0;
    RTFLOAT averagePitch = 0;

    //  using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.

    RTIMUSettings * settings = new RTIMUSettings("RTIMULib");

    RTIMU * imu = RTIMU::createIMU(settings);
    RTPressure * pressure = RTPressure::createPressure(settings);
    RTHumidity * humidity = RTHumidity::createHumidity(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) 
	{
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up pressure sensor

    if (pressure != NULL)
        pressure->pressureInit();

    //  set up humidity sensor

    if (humidity != NULL)
        humidity->humidityInit();

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (1) 
	{
		/* HINT: The whole purpose of the weird way this is written is to poll the 
		 *       IMU at its recommended rate, but display the data at a rate that may be different.
         *		 Not polling at the correct rate can result in weird readings.
		 *
		 **/
		
        //  poll at the rate recommended by the IMU
		
        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) 
		{
            RTIMU_DATA imuData = imu->getIMUData();

            //  add the pressure data to the structure

            if (pressure != NULL)
                pressure->pressureRead(imuData);

            //  add the humidity data to the structure

            if (humidity != NULL)
                humidity->humidityRead(imuData);

            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 1 time per second
			//  HINT: The code inside this "if" statement executes once per second.
			//        Put all of your code to print/calculate current and average IMU data inside here.
			//        You shouldn't need to modify anything outside of this "if" statement.
			//        The IMU is polled at the recommended rate, but this "if" statement ensures that the  
            //        values are only displayed at a certain interval.			
            if ((now - displayTimer) > 1000000) 
			{ 
				
                //printf("Sample rate %d: %s\n", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));

                if (pressure != NULL) 
		{
                    printf("Temperature: %4.1f", imuData.temperature);
                    tempReadings[storageCounter] = imuData.temperature;
			
		}
							
                printf("\n");
		
		printf("Roll: %f, Pitch: %f, Yaw: %f\n", 
		    imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE,
	 	    imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE,
		    imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE);
		
		rollReadings[storageCounter] = imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
		pitchReadings[storageCounter] = imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE;
		yawReadings[storageCounter] = imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;
		
		

		averageTemp = 0;
		averageRoll = 0;
		averagePitch = 0;
		averageYaw = 0;
		for(int i=0; i<10; i++)
		{
		    averageTemp += tempReadings[i]; 	
		    averageRoll += rollReadings[i];		
		    averagePitch += pitchReadings[i];
		    averageYaw += yawReadings[i];
		}
		averageTemp /= 10;
		averageRoll /= 10;
		averageYaw /= 10;
		averagePitch /= 10;	

		printf("Temperature Average: %4.1f\n", averageTemp);
		printf("Roll Average: %4.1f, ", averageRoll);
		printf("Pitch Average: %4.1f, ", averagePitch);
		printf("Yaw Average: %4.1f\n", averageYaw);
		
		if(storageCounter == 9){
		    storageCounter = 0;
		}else{
		    storageCounter++;
		}			
		
		printf("\n");	
			
                fflush(stdout);
                displayTimer = now;//HINT: LEAVE THIS LINE ALONE!!!
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) 
			{
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

